Q1. Check if it's possible to divide the array into k subsets with equal sum

import java.util.Arrays;

public class PartitionKSubsets {
    public static void main(String[] args) {
        int[] arr = {1, 3, 2, 2};
        int k = 2;
        System.out.println(canPartitionKSubsets(arr, k));
    }

    public static boolean canPartitionKSubsets(int[] nums, int k) {
        int sum = Arrays.stream(nums).sum();
        if (sum % k != 0) return false;

        boolean[] visited = new boolean[nums.length];
        return canPartition(nums, visited, 0, k, 0, sum / k);
    }

    public static boolean canPartition(int[] nums, boolean[] visited, int start, int k, int currentSum, int target) {
        if (k == 1) return true;
        if (currentSum == target) return canPartition(nums, visited, 0, k - 1, 0, target);

        for (int i = start; i < nums.length; i++) {
            if (!visited[i]) {
                visited[i] = true;
                if (canPartition(nums, visited, i + 1, k, currentSum + nums[i], target)) return true;
                visited[i] = false;
            }
        }
        return false;
    }
}

Q2: Print all possible permutations of an array

import java.util.ArrayList;
import java.util.List;

public class Permutations {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3};
        List<List<Integer>> result = new ArrayList<>();
        permute(arr, 0, result);
        System.out.println(result);
    }

    public static void permute(int[] nums, int start, List<List<Integer>> result) {
        if (start == nums.length - 1) {
            List<Integer> list = new ArrayList<>();
            for (int num : nums) list.add(num);
            result.add(list);
            return;
        }
        for (int i = start; i < nums.length; i++) {
            swap(nums, i, start);
            permute(nums, start + 1, result);
            swap(nums, i, start);
        }
    }

    public static void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
}

Q3: Find unique permutations of an array with duplicates

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class UniquePermutations {
    public static void main(String[] args) {
        int[] nums = {1, 1, 2};
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(nums);
        backtrack(nums, new boolean[nums.length], new ArrayList<>(), result);
        System.out.println(result);
    }

    public static void backtrack(int[] nums, boolean[] used, List<Integer> current, List<List<Integer>> result) {
        if (current.size() == nums.length) {
            result.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (used[i] || (i > 0 && nums[i] == nums[i - 1] && !used[i - 1])) continue;
            used[i] = true;
            current.add(nums[i]);
            backtrack(nums, used, current, result);
            current.remove(current.size() - 1);
            used[i] = false;
        }
    }
}

Q4: Check if the product of some subset of an array is equal to the target value

public class SubsetProduct {
    public static void main(String[] args) {
        int[] arr = {2, 3, 2, 5, 4};
        int target = 16;
        System.out.println(isSubsetProduct(arr, target));
    }

    public static boolean isSubsetProduct(int[] nums, int target) {
        return subsetProduct(nums, 0, 1, target);
    }

    public static boolean subsetProduct(int[] nums, int index, int product, int target) {
        if (index == nums.length) {
            return product == target;
        }
        return subsetProduct(nums, index + 1, product * nums[index], target) ||
                subsetProduct(nums, index + 1, product, target);
    }
}

Q5: Number of distinct solutions to the n-queens puzzle

public class NQueens {
    public static void main(String[] args) {
        int n = 4;
        System.out.println(totalNQueens(n));
    }

    public static int totalNQueens(int n) {
        return solveNQueens(n, 0, new boolean[n], new boolean[2 * n], new boolean[2 * n]);
    }

    public static int solveNQueens(int n, int row, boolean[] cols, boolean[] d1, boolean[] d2) {
        if (row == n) return 1;
        int count = 0;
        for (int col = 0; col < n; col++) {
            int diag1 = row + col, diag2 = n - 1 - (row - col) + n;
            if (!cols[col] && !d1[diag1] && !d2[diag2]) {
                cols[col] = true;
                d1[diag1] = true;
                d2[diag2] = true;
                count += solveNQueens(n, row + 1, cols, d1, d2);
                cols[col] = false;
                d1[diag1] = false;
                d2[diag2] = false;
            }
        }
        return count;
    }
}
