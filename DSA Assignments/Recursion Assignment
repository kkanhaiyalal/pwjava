Q1: Sum of Digits using Recursion

public class SumOfDigitsRecursion {
    public static void main(String[] args) {
        int n = 1234;
        int sum = findDigitSum(n);
        System.out.println("Sum of digits: " + sum);
    }

    public static int findDigitSum(int num) {
        if (num == 0) {
            return 0;
        } else {
            return (num % 10 + findDigitSum(num / 10));
        }
    }
}

Q2: Sum of Natural Numbers with Alternate Signs

public class AlternateSignSumRecursion {
    public static void main(String[] args) {
        int n = 10;
        int sum = findAlternateSignSum(n);
        System.out.println("Sum with alternate signs: " + sum);
    }

    public static int findAlternateSignSum(int n) {
        if (n == 1) {
            return 1;
        } else if (n % 2 == 0) {
            return -n + findAlternateSignSum(n - 1);
        } else {
            return n + findAlternateSignSum(n - 1);
        }
    }
}

Q3: Maximum value in an array

public class MaxValueArrayRecursion {
    public static void main(String[] args) {
        int[] arr = {13, 1, -3, 22, 5};
        int max = findMax(arr, 0, arr.length - 1);
        System.out.println("Max value: " + max);
    }

    public static int findMax(int[] arr, int start, int end) {
        if (start == end) {
            return arr[start];
        }

        int mid = (start + end) / 2;
        int leftMax = findMax(arr, start, mid);
        int rightMax = findMax(arr, mid + 1, end);

        return Math.max(leftMax, rightMax);
    }
}

Q4: Sum of values in an array

public class SumArrayValuesRecursion {
    public static void main(String[] args) {
        int[] arr = {92, 23, 15, -20, 10};
        int sum = findSum(arr, 0);
        System.out.println("Sum of array values: " + sum);
    }

    public static int findSum(int[] arr, int index) {
        if (index == arr.length) {
            return 0;
        }

        return arr[index] + findSum(arr, index + 1);
    }
}

Q5: Check for Armstrong number (Recursively)

public class ArmstrongNumberRecursion {
    public static void main(String[] args) {
        int n1 = 153;
        int n2 = 134;

        System.out.println(n1 + " is Armstrong? " + isArmstrong(n1, n1));
        System.out.println(n2 + " is Armstrong? " + isArmstrong(n2, n2));
    }

    public static boolean isArmstrong(int num, int original) {
        if (num == 0) {
            return num == original;
        }

        int digit = num % 10;
        int digits = String.valueOf(original).length();
        return (int) (Math.pow(digit, digits)) + isArmstrong(num / 10, original);
    }
}
