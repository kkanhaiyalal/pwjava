1. Mutable String in Java explain with an example:
In Java, String objects are immutable, meaning their values cannot be changed after creation. However, StringBuilder and StringBuffer classes provide mutable sequences of characters.
Example demonstrating mutable strings using StringBuilder:

// Mutable String in Java using StringBuilder
public class MutableStringExample {
    public static void main(String[] args) {
        StringBuilder mutableString = new StringBuilder("Hello");
        mutableString.append(" World"); // Modify the string
        System.out.println("Mutable String: " + mutableString);
    }
}

2. WAP to reverse a String:
// Reverse a String
public class ReverseString {
    public static void main(String[] args) {
        String input = "PWSKILLS";
        String reversed = reverseString(input);
        System.out.println("Reversed string: " + reversed);
    }

    public static String reverseString(String input) {
        return new StringBuilder(input).reverse().toString();
    }
}

3. WAP to reverse a sentence while preserving the position:

// Reverse a sentence while preserving the position of words
public class ReverseSentence {
    public static void main(String[] args) {
        String sentence = "Think Twice";
        String reversedSentence = reverseSentence(sentence);
        System.out.println("Reversed sentence: " + reversedSentence);
    }

    public static String reverseSentence(String sentence) {
        String[] words = sentence.split(" ");
        StringBuilder reversed = new StringBuilder();
        for (String word : words) {
            reversed.insert(0, new StringBuilder(word).reverse()).insert(0, " ");
        }
        return reversed.toString().trim();
    }
}

4. WAP to sort a String alphabetically:

// Sort a String alphabetically
public class SortStringAlphabetically {
    public static void main(String[] args) {
        String input = "cabed";
        String sorted = sortString(input);
        System.out.println("Sorted string: " + sorted);
    }

    public static String sortString(String input) {
        char[] chars = input.toCharArray();
        Arrays.sort(chars);
        return new String(chars);
    }
}
